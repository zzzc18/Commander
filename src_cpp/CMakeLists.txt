cmake_minimum_required(VERSION 3.0)
project(cpp_for_lua)
if (CMAKE_HOST_WIN32)
    set(WINDOWS 1)
elseif(CMAKE_HOST_APPLE)
    set(MACOS 1)
elseif(CMAKE_HOST_UNIX)
    set(LINUX 1)
endif()

add_definitions(-DDEBUG)
set(CMAKE_CXX_STANDARD 17)
# more warnings
if (CMAKE_CXX_COMPILER_ID MATCHES "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2 -Wall -Weffc++")
    add_compile_definitions(__func__=__PRETTY_FUNCTION__ DEBUG)
endif()
#find include path
# include_directories(include /usr/local/include)
include_directories(include)
if(WINDOWS)
    find_package(Lua51 REQUIRED)
    include_directories(${LUA_INCLUDE_DIR})
    #position of .dll file
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/../lib)
elseif(LINUX)
    #position of .so file
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/../lib)
elseif(MACOS)
    #position of .dylib file
    find_package(Lua51 REQUIRED)
    include_directories(${LUA_INCLUDE_DIR})
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/../lib)
    # link_directories(../lib)
endif()
#add source files to variable xxx_SOURCE_FILES
aux_source_directory(GameMap GameMap_SOURCE_FILES)
aux_source_directory(System System_SOURCE_FILES)
aux_source_directory(Verify Verify_SOURCE_FILES)
#generate .so/.dll files
add_library(Full STATIC ${GameMap_SOURCE_FILES} ${System_SOURCE_FILES} ${Verify_SOURCE_FILES})
add_library(CLib SHARED CLib/API.cpp)
target_link_libraries(CLib Full ${LUA_LIBRARIES})

if(WINDOWS)
    target_link_libraries(Verify ${LUA_LIBRARIES})
    target_link_libraries(GameMap Verify ${LUA_LIBRARIES})
    target_link_libraries(System GameMap ${LUA_LIBRARIES})
elseif(LINUX)
    target_link_libraries(GameMap Verify)
    target_link_libraries(System GameMap)
elseif(MACOS)
endif()
#change name: e.g. libmat.so->lib_mat.so
set_target_properties(CLib PROPERTIES PREFIX "")
