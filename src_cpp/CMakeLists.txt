cmake_minimum_required(VERSION 3.0)
project(cpp_for_lua)
if (CMAKE_HOST_WIN32)
    set(WINDOWS 1)
elseif(CMAKE_HOST_APPLE)
    set(MACOS 1)
elseif(CMAKE_HOST_UNIX)
    set(LINUX 1)
endif()

#set(CompileMode "User")
 set(CompileMode "Developer")

add_definitions(-DDEBUG)
set(CMAKE_CXX_STANDARD 17)
# more warnings
if (CMAKE_CXX_COMPILER_ID MATCHES "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2 -Wall -Weffc++")
    # add_compile_definitions(__func__=__PRETTY_FUNCTION__ DEBUG)
endif()
#find include path

include_directories(include)
if(CompileMode STREQUAL "User")
    link_directories(${PROJECT_SOURCE_DIR}/../lib)
endif()

if(WINDOWS)
    find_package(Lua51 REQUIRED)
    include_directories(${LUA_INCLUDE_DIR})
    #position of .dll file
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/../lib)
elseif(LINUX)
    #position of .so file
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/../lib)
endif()

#add source files to variable xxx_SOURCE_FILES
if(CompileMode STREQUAL "Developer")
    aux_source_directory(GameMap GameMap_SOURCE_FILES)
    aux_source_directory(System System_SOURCE_FILES)
    aux_source_directory(Verify Verify_SOURCE_FILES)
endif()
aux_source_directory(UserAPI UserAPI_SOURCE_FILES)
aux_source_directory(UserImplementation UserImplementation_SOURCE_FILES)

#generate .so/.dll files
if(CompileMode STREQUAL "Developer")
    add_library(GameMap SHARED ${GameMap_SOURCE_FILES})
    add_library(System SHARED ${System_SOURCE_FILES})
    add_library(Verify SHARED ${Verify_SOURCE_FILES})
endif()
add_library(UserAPI SHARED ${UserAPI_SOURCE_FILES})
add_library(UserImplementation SHARED ${UserImplementation_SOURCE_FILES})

if(WINDOWS)
    if(CompileMode STREQUAL "Developer")
        target_link_libraries(Verify ${LUA_LIBRARIES})
        target_link_libraries(GameMap Verify ${LUA_LIBRARIES})
        target_link_libraries(System GameMap ${LUA_LIBRARIES})
        target_link_libraries(UserAPI GameMap ${LUA_LIBRARIES})
        target_link_libraries(UserImplementation UserAPI GameMap Verify ${LUA_LIBRARIES})
    elseif(CompileMode STREQUAL "User")
        target_link_libraries(UserAPI GameMap.dll ${LUA_LIBRARIES})
        target_link_libraries(UserImplementation UserAPI.dll GameMap.dll Verify.dll ${LUA_LIBRARIES})
    endif()
elseif(LINUX)
    if(CompileMode STREQUAL "Developer")
        target_link_libraries(GameMap Verify)
        target_link_libraries(System GameMap)
        target_link_libraries(UserAPI GameMap)
        target_link_libraries(UserImplementation UserAPI GameMap Verify)
    elseif(CompileMode STREQUAL "User")
        target_link_libraries(UserAPI GameMap.so)
        target_link_libraries(UserImplementation UserAPI.so GameMap.so Verify.so)
    endif()
endif()
#change name: e.g. libmat.so->lib_mat.so
if(CompileMode STREQUAL "Developer")
    set_target_properties(GameMap System Verify UserAPI UserImplementation PROPERTIES PREFIX "")
elseif(CompileMode STREQUAL "User")
    set_target_properties(UserAPI UserImplementation PROPERTIES PREFIX "")
endif()
